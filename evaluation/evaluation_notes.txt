# Copyright (c) 2011-2013 Peng Sun. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the COPYRIGHT file.

General:
Change controller and test server IPs in scripts
to avoid intensively calling AWS CLI. 

Exp1:
Test conn measurement overhead

run startServer on a server machine
runExp1 will launch 1k to 10k connections to the server
Controllor runs exp_connMeasureOverhead
(Controller should disable hone_hostinfo)
(Agent should service rsyslog stop)

Repeat with exp_connMeasureOverhead and exp_evalCpuMem on controller
to get CPU and memory usages.


Exp2:
Test lazy materialization

start background connection 1000, test_prog 1000

Steps:
2. controller run exp_all
3. ./runExp2 all
5. controller run exp_lmConnStats7 app
6. ./runExp2 connStats7
7. controller run exp_lmConnStatsAll app
8. ./runExp2 connStatsAll
9. controller run exp_lmAppCpuAll
10. ./runExp2 appCpuAll
11. controller run exp_lmAppMemAll
12. ./runExp2 appMemAll
13. controller run exp_lmAppTestProg
14. ./runExp2 appTestProg

Exp4:
End-to-end responsiveness test

q1:
start iperf server on one host.
run iperf client with 100 connnections.
controller run exp_exp4q1.py
start agent
last for 5m

Repeat with controller running exp_exp4q1.py and exp_evalCpuMemTp
Get CPU and memory usage on both agent and controller

Don't overwrite the agent.log and controller.log


Exp5:
MergeHosts test

Remember:
change runTestProg server IP
change startHoneAgent controller IP
change runExp5 controller IP
start server on test-server

controller run exp_exp4q1.py
disable hostinfo

host executes runExp5
controller executes runExp5Controller

Step1:
launch ec2 instances (launchHostInstances)
list all name-IP mapping of EC2 instances (listAllEc2Instances.py)

Step2:
launch runExp5 and runExp5Controller on all instances
(startExp5EC2.py)

Step3:
log in to controller. Based on the scale of experiment, move data files to
corresponding folder. 
Launch the parser to check the results. 


Exp6:
aggregation test

Remember:
Do all the things till Step1 in Exp5

Step2:
launch runExp6 and runExp6controller on all instances
controller runs exp_exp6
controller runs exp_evalCpuMemTp to log the cpu and memory usages
(startExp6EC2.py)

Step3:
On controller, move data files to corresponding folders.
Launch parser to check the results. 




Exp DRL
distributed rate limiting
start trafclient on 5 hosts, each by 10 seconds
equally allocate bandwidth among active hosts

1 trafclient connection, 1K bytes packet = ~25Mbps demand

Remember:
change server IP in runTrafclient
start trafserver on server
everything in Exp5 'Remember'

start agent, launch trafclient traffic on each host, one by one every
10 seconds.
(startExpDrl.py)
